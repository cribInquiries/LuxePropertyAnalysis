// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  AGENT
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  LAND
  COMMERCIAL
}

enum PropertyStatus {
  FOR_SALE
  FOR_RENT
  SOLD
  RENTED
}

enum AnalysisType {
  MARKET
  INVESTMENT
  COMPARATIVE
  FORECAST
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  phone     String?
  bio       String?
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  properties     Property[]
  analyses       Analysis[]
  favorites      Favorite[]
  inquiries      Inquiry[]
  sentMessages   Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")

  @@map("users")
}

model Property {
  id          String         @id @default(uuid())
  title       String
  description String
  price       Decimal        @db.Decimal(12, 2)
  propertyType PropertyType
  status      PropertyStatus @default(FOR_SALE)
  bedrooms    Int?
  bathrooms   Int?
  squareFeet  Int?
  lotSize     Decimal?       @db.Decimal(10, 2)
  yearBuilt   Int?
  
  // Address
  street      String
  city        String
  state       String
  zipCode     String
  country     String         @default("US")
  latitude    Float?
  longitude   Float?
  
  // Features and media
  features    String[]
  images      String[]
  virtualTour String?
  
  // Metadata
  isActive    Boolean        @default(true)
  isFeatured  Boolean        @default(false)
  views       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  ownerId     String
  owner       User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  agentId     String?
  agent       User?         @relation("PropertyAgent", fields: [agentId], references: [id])
  analyses    Analysis[]
  favorites   Favorite[]
  inquiries   Inquiry[]
  messages    Message[]

  @@map("properties")
}

model Analysis {
  id            String       @id @default(uuid())
  propertyId    String
  property      Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  analystId     String
  analyst       User         @relation(fields: [analystId], references: [id], onDelete: Cascade)
  analysisType  AnalysisType
  title         String
  description   String?
  data          Json
  insights      String[]
  recommendations String[]
  confidence    Float?       @db.Decimal(3, 2)
  isPublic      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("analyses")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, propertyId])
  @@map("favorites")
}

model Inquiry {
  id         String   @id @default(uuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message    String
  phone      String?
  email      String?
  status     String   @default("PENDING") // PENDING, CONTACTED, CLOSED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("inquiries")
}

model Message {
  id         String   @id @default(uuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  senderId   String
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  subject    String?
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@map("messages")
}

model PropertyView {
  id         String   @id @default(uuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  ipAddress  String?
  userAgent  String?
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt  DateTime @default(now())

  @@map("property_views")
}

model MarketData {
  id        String   @id @default(uuid())
  city      String
  state     String
  zipCode   String?
  data      Json
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  @@unique([city, state, zipCode, date])
  @@map("market_data")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  type      String   // INFO, WARNING, SUCCESS, ERROR
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())

  @@map("notifications")
}
